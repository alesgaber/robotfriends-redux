{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","console","log","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","isPenfding","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","pendning","logger","createLogger","rootReducer","combineReducers","action","Object","assign","isPanding","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8617dfb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    // const {name, email, id} = props;\r\n    return (        \r\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>            \r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n      robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].id}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nconst SearchBox=({searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-light-blue\"\r\n            type=\"search\" \r\n            placeholder=\"search robots\"\r\n            onChange={searchChange}\r\n            \r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\nimport './Scroll.css'\r\n\r\nconst Scroll = props => {  \r\n  return (\r\n      <div  style={{overflowY: 'scroll', border:'5px solid black', height: '800px'}}>\r\n          {props.children}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Scroll\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED= 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport { connect } from 'react-redux'\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\n// what piece of state i must to listen\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots:state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPenfding,\r\n    error: state.requestRobots.error,\r\n  }\r\n}\r\n// return object that contains our actions (I'am interested in this actions)\r\nconst mapDispatchToProps = dispatch => {\r\n  return {    \r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: ()=> dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n \r\n  componentDidMount () {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render () {\r\n    \r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\nconsole.log(this.props);\r\n    const filteredRobots = robots.filter(robot =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    )\r\n    return isPending\r\n      ? <h1>Loading...</h1>\r\n      : <div className='tc'>\r\n        <h1 className='f2'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n// connect is higher-order function..function thats return another function and run App\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n      .catch(error=> dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  pendning: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPanding: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPanding: false\r\n      })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPanding: false })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport './index.css'\r\nimport App from './containers/App.js'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport 'tachyons'\r\nimport { searchRobots, requestRobots } from './reducers'\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}